
ADC_Debugger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000262  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000071  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013b  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000bd  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b3  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e9  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_29>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ee       	ldi	r30, 0xEE	; 238
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 6d 00 	call	0xda	; 0xda <main>
  d2:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <main>:

//################## MAIN ROUTINE ##################
int main(int argc, char *argv[]){

// Output Ports
DDRA = 0b11111111; // Signal to Stepper
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	91 b9       	out	0x01, r25	; 1
DDRB = 0b10101111; // PWM Output A for Timer/Counter0 or PWM Output B for Timer/Counter1 (bit 7)
  de:	8f ea       	ldi	r24, 0xAF	; 175
  e0:	84 b9       	out	0x04, r24	; 4
DDRC = 0b11111111; // LEDs display
  e2:	97 b9       	out	0x07, r25	; 7

// Input Ports
DDRD = 0b11110000; // External Interrupts 0 to 3 (bits 0 to 3)
  e4:	80 ef       	ldi	r24, 0xF0	; 240
  e6:	8a b9       	out	0x0a, r24	; 10
DDRE = 0b00000000; // External Interrupts 7 to 4 (bits 4 to 7)
  e8:	1d b8       	out	0x0d, r1	; 13
DDRF = 0b00000000; // ADC Input Channel 0 (bit 0)
  ea:	10 ba       	out	0x10, r1	; 16

// Timers
TCCR1B |=_BV(CS10); // Timer/Counter Control Register B for Timer 1, Chooses no prescaler, the frequency is 8MHz.
  ec:	80 91 81 00 	lds	r24, 0x0081
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 93 81 00 	sts	0x0081, r24
TCCR0B |=_BV(CS01); // Timer/Counter Control Register B for Timer 0 (PWM), Chooses no prescaler, the frequency is 1 MHz.
  f6:	85 b5       	in	r24, 0x25	; 37
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 bd       	out	0x25, r24	; 37
TCCR0A |=_BV(WGM00) | _BV(WGM01); // Timer/Counter Control0 Register A for Timer 0 
  fc:	84 b5       	in	r24, 0x24	; 36
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	84 bd       	out	0x24, r24	; 36



// ADC Setup
// by default, the ADC input (analog input is set to be ADC0 / PORTF0)
	ADCSRA |= _BV(ADEN); // enable ADC
 102:	80 91 7a 00 	lds	r24, 0x007A
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADIE); // converson complete enable interrupt of ADC
 10c:	80 91 7a 00 	lds	r24, 0x007A
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 93 7a 00 	sts	0x007A, r24
//	ADMUX |= _BV(ADLAR); // ADLAR sets left justified, which is fine for 8 bits. The REFS0 sets voltage reference to AVcc with external capacitor AREF
	ADMUX |= _BV(REFS0);
 116:	80 91 7c 00 	lds	r24, 0x007C
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 93 7c 00 	sts	0x007C, r24

// Interrupt Setup
cli();	// Disables all interrupts
 120:	f8 94       	cli
EICRA |= _BV(ISC01) | _BV(ISC11) | _BV(ISC21) | _BV(ISC30) | _BV(ISC31); // This gives PORTD0-3 a falling edge interrupt sense
 122:	80 91 69 00 	lds	r24, 0x0069
 126:	8a 6e       	ori	r24, 0xEA	; 234
 128:	80 93 69 00 	sts	0x0069, r24

EIMSK |= _BV(INT0); // Interrupt Enable PIN D0
 12c:	e8 9a       	sbi	0x1d, 0	; 29
EIMSK |= _BV(INT1); // Interrupt Enable PIN D1
 12e:	e9 9a       	sbi	0x1d, 1	; 29
EIMSK |= _BV(INT2); // Interrupt Enable PIN D2
 130:	ea 9a       	sbi	0x1d, 2	; 29
EIMSK |= _BV(INT3); // Interrupt Enable PIN D3
 132:	eb 9a       	sbi	0x1d, 3	; 29

sei();	// Note this sets the Global Enable for all interrupts
 134:	78 94       	sei


while(1){


	ADCSRA |= _BV(ADSC);
 136:	80 91 7a 00 	lds	r24, 0x007A
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 93 7a 00 	sts	0x007A, r24
	while (ADC_result_flag==0)	
 140:	80 91 01 01 	lds	r24, 0x0101
 144:	90 91 02 01 	lds	r25, 0x0102
 148:	89 2b       	or	r24, r25
 14a:	d1 f3       	breq	.-12     	; 0x140 <main+0x66>
	{
	}
	ADC_result_flag = 0x00;
 14c:	10 92 02 01 	sts	0x0102, r1
 150:	10 92 01 01 	sts	0x0101, r1
	
	//mTimer(1000);
	PORTC = ADC_result_low;
 154:	80 91 03 01 	lds	r24, 0x0103
 158:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b00000000;
 15a:	1b b8       	out	0x0b, r1	; 11
	if(ADC_result_high & 0b00000001 == 0b00000001)
 15c:	80 91 00 01 	lds	r24, 0x0100
 160:	80 ff       	sbrs	r24, 0
 162:	03 c0       	rjmp	.+6      	; 0x16a <main+0x90>
	{
		PORTD |= 0b11000000;
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	80 6c       	ori	r24, 0xC0	; 192
 168:	8b b9       	out	0x0b, r24	; 11
	}
	if(ADC_result_high & 0b00000010 == 0b00000010)
 16a:	80 91 00 01 	lds	r24, 0x0100
 16e:	80 ff       	sbrs	r24, 0
 170:	e2 cf       	rjmp	.-60     	; 0x136 <main+0x5c>
	{
		PORTD |= 0b00110000;
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 63       	ori	r24, 0x30	; 48
 176:	8b b9       	out	0x0b, r24	; 11
 178:	de cf       	rjmp	.-68     	; 0x136 <main+0x5c>

0000017a <__vector_29>:
//################## INTERRUPTS ##################


// the interrupt will be trigured if the ADC is done 
ISR(ADC_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	ADC_result_low = ADCL;
 188:	80 91 78 00 	lds	r24, 0x0078
 18c:	80 93 03 01 	sts	0x0103, r24
	ADC_result_high = ADCH;
 190:	80 91 79 00 	lds	r24, 0x0079
 194:	80 93 00 01 	sts	0x0100, r24
	ADC_result_flag = 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 02 01 	sts	0x0102, r25
 1a0:	80 93 01 01 	sts	0x0101, r24
}
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <mTimer>:

//################## FUNCTIONS ##################

// DESC: initializes a timer lasting COUNT milliseconds
void mTimer(int count)
{
 1b2:	9c 01       	movw	r18, r24
	int i;
	i=0;

	TCCR1B |=_BV(WGM12); // Timer/Counter1 Control Register B set bit WGM12 to 1 which is CTC. CTC is Clear Timer on Compare
 1b4:	80 91 81 00 	lds	r24, 0x0081
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	80 93 81 00 	sts	0x0081, r24
	OCR1A=0x03e8; // Output Compare Register is set to 1000 decimal at 1MHz => 1 ms 
 1be:	88 ee       	ldi	r24, 0xE8	; 232
 1c0:	93 e0       	ldi	r25, 0x03	; 3
 1c2:	90 93 89 00 	sts	0x0089, r25
 1c6:	80 93 88 00 	sts	0x0088, r24
	TCNT1=0x0000; // Initial Value of the Timer to 0
 1ca:	10 92 85 00 	sts	0x0085, r1
 1ce:	10 92 84 00 	sts	0x0084, r1
	//TIMSK1=TIMSK1 | 0b00000010; // Sets OCIE3A bit to 1 which is a timer output compare A match
	TIFR1 |= _BV(OCF1A);
 1d2:	b1 9a       	sbi	0x16, 1	; 22
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <mTimer+0x30>

	while(i<count){
		if ((TIFR1 & 0x02) == 0x02){
 1da:	b1 9b       	sbis	0x16, 1	; 22
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <mTimer+0x28>
		TIFR1 |=_BV(OCF1A);
 1de:	b1 9a       	sbi	0x16, 1	; 22
		i++;
 1e0:	01 96       	adiw	r24, 0x01	; 1
	OCR1A=0x03e8; // Output Compare Register is set to 1000 decimal at 1MHz => 1 ms 
	TCNT1=0x0000; // Initial Value of the Timer to 0
	//TIMSK1=TIMSK1 | 0b00000010; // Sets OCIE3A bit to 1 which is a timer output compare A match
	TIFR1 |= _BV(OCF1A);

	while(i<count){
 1e2:	82 17       	cp	r24, r18
 1e4:	93 07       	cpc	r25, r19
 1e6:	cc f3       	brlt	.-14     	; 0x1da <mTimer+0x28>
		TIFR1 |=_BV(OCF1A);
		i++;
		}
	}

}
 1e8:	08 95       	ret

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
