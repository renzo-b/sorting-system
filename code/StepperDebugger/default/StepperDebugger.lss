
StepperDebugger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000c5e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800128  00800128  00000d1a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000032d  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081f  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000269  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c3  00000000  00000000  00001aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000430  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_2>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_3>
  10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_4>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_5>
  18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_6>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_29>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e5       	ldi	r30, 0x5E	; 94
  ac:	fc e0       	ldi	r31, 0x0C	; 12
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 32       	cpi	r26, 0x28	; 40
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a8 e2       	ldi	r26, 0x28	; 40
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a3 34       	cpi	r26, 0x43	; 67
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 a3 03 	call	0x746	; 0x746 <main>
  d2:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_default>

000000da <__vector_1>:


//################## INTERRUPTS ##################

ISR(INT0_vect)// OI
{ 
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
	
	STATE = 0;
  e4:	10 92 00 01 	sts	0x0100, r1
}
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_2>:

ISR(INT1_vect)// EX
{ 
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	if (PartPastExit == 1)
 100:	80 91 10 01 	lds	r24, 0x0110
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	49 f4       	brne	.+18     	; 0x11a <__vector_2+0x28>
	{

		if(StepperDesiredPosition != StepperCurrentPosition)
 108:	90 91 2c 01 	lds	r25, 0x012C
 10c:	80 91 2b 01 	lds	r24, 0x012B
 110:	98 13       	cpse	r25, r24
		{
			PORTB = 0b00000000;
 112:	15 b8       	out	0x05, r1	; 5
		}
		PartPastExit =0;
 114:	10 92 10 01 	sts	0x0110, r1
 118:	0e c0       	rjmp	.+28     	; 0x136 <__vector_2+0x44>
	}
	else
	{
		PartPastExit = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 10 01 	sts	0x0110, r24
		SamePart =0;
 120:	10 92 2d 01 	sts	0x012D, r1
		Exit_counter++;
 124:	80 91 30 01 	lds	r24, 0x0130
 128:	90 91 31 01 	lds	r25, 0x0131
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 31 01 	sts	0x0131, r25
 132:	80 93 30 01 	sts	0x0130, r24
	//	PORTC = Exit_counter;
	}
	//PORTC = PartPastExit;

}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_3>:

ISR(INT2_vect)// Hall Effect
{ 
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
	StepperInitialized = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 2a 01 	sts	0x012A, r24
	StepperCurrentPosition = 0;
 156:	10 92 2b 01 	sts	0x012B, r1
	STATE = 0;
 15a:	10 92 00 01 	sts	0x0100, r1
}
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_4>:

ISR(INT3_vect)// OR + RL
{ 
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25

	if(PartPastSensor == 1)
 178:	80 91 09 01 	lds	r24, 0x0109
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	71 f4       	brne	.+28     	; 0x19c <__vector_4+0x32>
	{
		PartPastSensor = 0;
 180:	10 92 09 01 	sts	0x0109, r1
		Lowest_value = 1023;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	90 93 0f 01 	sts	0x010F, r25
 18c:	80 93 0e 01 	sts	0x010E, r24
		ADCSRA |= _BV(ADSC); // Starts Conversion				
 190:	80 91 7a 00 	lds	r24, 0x007A
 194:	80 64       	ori	r24, 0x40	; 64
 196:	80 93 7a 00 	sts	0x007A, r24
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <__vector_4+0x38>
	}//end if
	else
	{
		PartPastSensor = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 09 01 	sts	0x0109, r24
	}//end else
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_5>:


ISR(INT4_vect) // Pause
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
	STATE = 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 00 01 	sts	0x0100, r24
	//PORTD = 0b11000000;
}
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_6>:

ISR(INT5_vect) // RampDown
{ 
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
	STATE = 2;
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	80 93 00 01 	sts	0x0100, r24
	//PORTD = 0b00110000;
}
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <mTimer>:
	mTimer(5); 
}

// DESC: initializes a timer lasting COUNT milliseconds
void mTimer(int count)
{
 1ec:	9c 01       	movw	r18, r24
	int i;
	i=0;

	TCCR1B |=_BV(WGM12); // Timer/Counter1 Control Register B set bit WGM12 to 1 which is CTC. CTC is Clear Timer on Compare
 1ee:	80 91 81 00 	lds	r24, 0x0081
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	80 93 81 00 	sts	0x0081, r24
	OCR1A=0x03e8; // Output Compare Register is set to 1000 decimal at 1MHz => 1 ms 
 1f8:	88 ee       	ldi	r24, 0xE8	; 232
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	90 93 89 00 	sts	0x0089, r25
 200:	80 93 88 00 	sts	0x0088, r24
	TCNT1=0x0000; // Initial Value of the Timer to 0
 204:	10 92 85 00 	sts	0x0085, r1
 208:	10 92 84 00 	sts	0x0084, r1
	//TIMSK1=TIMSK1 | 0b00000010; // Sets OCIE3A bit to 1 which is a timer output compare A match
	TIFR1 |= _BV(OCF1A);
 20c:	b1 9a       	sbi	0x16, 1	; 22
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	04 c0       	rjmp	.+8      	; 0x21c <mTimer+0x30>

	while(i<count)
	{
		if ((TIFR1 & 0x02) == 0x02)
 214:	b1 9b       	sbis	0x16, 1	; 22
 216:	fe cf       	rjmp	.-4      	; 0x214 <mTimer+0x28>
		{
			TIFR1 |=_BV(OCF1A);
 218:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 21a:	01 96       	adiw	r24, 0x01	; 1
	OCR1A=0x03e8; // Output Compare Register is set to 1000 decimal at 1MHz => 1 ms 
	TCNT1=0x0000; // Initial Value of the Timer to 0
	//TIMSK1=TIMSK1 | 0b00000010; // Sets OCIE3A bit to 1 which is a timer output compare A match
	TIFR1 |= _BV(OCF1A);

	while(i<count)
 21c:	82 17       	cp	r24, r18
 21e:	93 07       	cpc	r25, r19
 220:	cc f3       	brlt	.-14     	; 0x214 <mTimer+0x28>
			TIFR1 |=_BV(OCF1A);
			i++;
		}//end if
	}//end while

}
 222:	08 95       	ret

00000224 <MoveStepperRamp>:


}	


void MoveStepperRamp(int steps, int direction){
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	7c 01       	movw	r14, r24

	int i = Last_position;
 232:	c0 91 28 01 	lds	r28, 0x0128
 236:	d0 91 29 01 	lds	r29, 0x0129
	int delay = 6;


	if (direction ==0 ) { // clockwise
 23a:	67 2b       	or	r22, r23
 23c:	09 f0       	breq	.+2      	; 0x240 <MoveStepperRamp+0x1c>
 23e:	4b c0       	rjmp	.+150    	; 0x2d6 <MoveStepperRamp+0xb2>
 240:	01 e1       	ldi	r16, 0x11	; 17
 242:	11 e0       	ldi	r17, 0x01	; 1

		for (int j=0;j<16;j++){
				i++;
 244:	21 96       	adiw	r28, 0x01	; 1
				// Goes through the step positions in the array in increasing order
				if(i>3) i=0;
 246:	c4 30       	cpi	r28, 0x04	; 4
 248:	d1 05       	cpc	r29, r1
 24a:	14 f0       	brlt	.+4      	; 0x250 <MoveStepperRamp+0x2c>
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
			
				PORTA = Position_array[i];
 250:	fe 01       	movw	r30, r28
 252:	eb 5f       	subi	r30, 0xFB	; 251
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	80 81       	ld	r24, Z
 258:	82 b9       	out	0x02, r24	; 2
				mTimer(Delay_array[j]); 
 25a:	f8 01       	movw	r30, r16
 25c:	81 91       	ld	r24, Z+
 25e:	8f 01       	movw	r16, r30
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
	int delay = 6;


	if (direction ==0 ) { // clockwise

		for (int j=0;j<16;j++){
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	01 32       	cpi	r16, 0x21	; 33
 26a:	1f 07       	cpc	r17, r31
 26c:	59 f7       	brne	.-42     	; 0x244 <MoveStepperRamp+0x20>
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	10 e0       	ldi	r17, 0x00	; 0
				mTimer(Delay_array[j]); 

		}// end for
		
		
		for (int j=0;j<(steps-32);j++){
 272:	80 ee       	ldi	r24, 0xE0	; 224
 274:	9f ef       	ldi	r25, 0xFF	; 255
 276:	e8 0e       	add	r14, r24
 278:	f9 1e       	adc	r15, r25
 27a:	11 c0       	rjmp	.+34     	; 0x29e <MoveStepperRamp+0x7a>
				i++;
 27c:	21 96       	adiw	r28, 0x01	; 1
				// Goes through the step positions in the array in increasing order
				if(i>3) i=0;
 27e:	c4 30       	cpi	r28, 0x04	; 4
 280:	d1 05       	cpc	r29, r1
 282:	11 f4       	brne	.+4      	; 0x288 <MoveStepperRamp+0x64>
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
			
				PORTA = Position_array[i];
 288:	fe 01       	movw	r30, r28
 28a:	eb 5f       	subi	r30, 0xFB	; 251
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	80 81       	ld	r24, Z
 290:	82 b9       	out	0x02, r24	; 2
				mTimer(delay); 
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
				mTimer(Delay_array[j]); 

		}// end for
		
		
		for (int j=0;j<(steps-32);j++){
 29a:	0f 5f       	subi	r16, 0xFF	; 255
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
 29e:	0e 15       	cp	r16, r14
 2a0:	1f 05       	cpc	r17, r15
 2a2:	64 f3       	brlt	.-40     	; 0x27c <MoveStepperRamp+0x58>
 2a4:	00 e2       	ldi	r16, 0x20	; 32
 2a6:	11 e0       	ldi	r17, 0x01	; 1
				mTimer(delay); 

		}// end for

		for (int j=0;j<16;j++){
				i++;
 2a8:	21 96       	adiw	r28, 0x01	; 1
				// Goes through the step positions in the array in increasing order
				if(i>3) i=0;
 2aa:	c4 30       	cpi	r28, 0x04	; 4
 2ac:	d1 05       	cpc	r29, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <MoveStepperRamp+0x90>
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
			
				PORTA = Position_array[i];
 2b4:	fe 01       	movw	r30, r28
 2b6:	eb 5f       	subi	r30, 0xFB	; 251
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	80 81       	ld	r24, Z
 2bc:	82 b9       	out	0x02, r24	; 2
				mTimer(Delay_array[15-j]); 
 2be:	f8 01       	movw	r30, r16
 2c0:	80 81       	ld	r24, Z
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
 2c8:	01 50       	subi	r16, 0x01	; 1
 2ca:	10 40       	sbci	r17, 0x00	; 0
				PORTA = Position_array[i];
				mTimer(delay); 

		}// end for

		for (int j=0;j<16;j++){
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	00 31       	cpi	r16, 0x10	; 16
 2d0:	1f 07       	cpc	r17, r31
 2d2:	51 f7       	brne	.-44     	; 0x2a8 <MoveStepperRamp+0x84>
 2d4:	4b c0       	rjmp	.+150    	; 0x36c <MoveStepperRamp+0x148>
 2d6:	01 e1       	ldi	r16, 0x11	; 17
 2d8:	11 e0       	ldi	r17, 0x01	; 1
		
		// Goes through the step positions in the array in reverse order
		
		
		for (int j=0;j<16;j++){
			i--;
 2da:	21 97       	sbiw	r28, 0x01	; 1
			// Goes through the step positions in the array in increasing order
			if(i<0) i=3;
 2dc:	d7 ff       	sbrs	r29, 7
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <MoveStepperRamp+0xc0>
 2e0:	c3 e0       	ldi	r28, 0x03	; 3
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
			
			PORTA = Position_array[i];
 2e4:	fe 01       	movw	r30, r28
 2e6:	eb 5f       	subi	r30, 0xFB	; 251
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	80 81       	ld	r24, Z
 2ec:	82 b9       	out	0x02, r24	; 2
			mTimer(Delay_array[j]); 
 2ee:	f8 01       	movw	r30, r16
 2f0:	81 91       	ld	r24, Z+
 2f2:	8f 01       	movw	r16, r30
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
	else {	// counter clockwise
		
		// Goes through the step positions in the array in reverse order
		
		
		for (int j=0;j<16;j++){
 2fa:	f1 e0       	ldi	r31, 0x01	; 1
 2fc:	01 32       	cpi	r16, 0x21	; 33
 2fe:	1f 07       	cpc	r17, r31
 300:	61 f7       	brne	.-40     	; 0x2da <MoveStepperRamp+0xb6>
 302:	00 e0       	ldi	r16, 0x00	; 0
 304:	10 e0       	ldi	r17, 0x00	; 0
			PORTA = Position_array[i];
			mTimer(Delay_array[j]); 

		}// end for

		for (int j=0;j<(steps-32);j++){
 306:	80 ee       	ldi	r24, 0xE0	; 224
 308:	9f ef       	ldi	r25, 0xFF	; 255
 30a:	e8 0e       	add	r14, r24
 30c:	f9 1e       	adc	r15, r25
 30e:	12 c0       	rjmp	.+36     	; 0x334 <MoveStepperRamp+0x110>
			i--;
 310:	21 97       	sbiw	r28, 0x01	; 1
			// Goes through the step positions in the array in increasing order
			if(i<0) i=3;
 312:	9f ef       	ldi	r25, 0xFF	; 255
 314:	cf 3f       	cpi	r28, 0xFF	; 255
 316:	d9 07       	cpc	r29, r25
 318:	11 f4       	brne	.+4      	; 0x31e <MoveStepperRamp+0xfa>
 31a:	c3 e0       	ldi	r28, 0x03	; 3
 31c:	d0 e0       	ldi	r29, 0x00	; 0
			
			PORTA = Position_array[i];
 31e:	fe 01       	movw	r30, r28
 320:	eb 5f       	subi	r30, 0xFB	; 251
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	80 81       	ld	r24, Z
 326:	82 b9       	out	0x02, r24	; 2
			mTimer(delay); 
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
			PORTA = Position_array[i];
			mTimer(Delay_array[j]); 

		}// end for

		for (int j=0;j<(steps-32);j++){
 330:	0f 5f       	subi	r16, 0xFF	; 255
 332:	1f 4f       	sbci	r17, 0xFF	; 255
 334:	0e 15       	cp	r16, r14
 336:	1f 05       	cpc	r17, r15
 338:	5c f3       	brlt	.-42     	; 0x310 <MoveStepperRamp+0xec>
 33a:	00 e2       	ldi	r16, 0x20	; 32
 33c:	11 e0       	ldi	r17, 0x01	; 1

		}// end for

		
		for (int j=0;j<16;j++){
			i--;
 33e:	21 97       	sbiw	r28, 0x01	; 1
			// Goes through the step positions in the array in increasing order
			if(i<0) i=3;
 340:	ef ef       	ldi	r30, 0xFF	; 255
 342:	cf 3f       	cpi	r28, 0xFF	; 255
 344:	de 07       	cpc	r29, r30
 346:	11 f4       	brne	.+4      	; 0x34c <MoveStepperRamp+0x128>
 348:	c3 e0       	ldi	r28, 0x03	; 3
 34a:	d0 e0       	ldi	r29, 0x00	; 0
			
			PORTA = Position_array[i];
 34c:	fe 01       	movw	r30, r28
 34e:	eb 5f       	subi	r30, 0xFB	; 251
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	80 81       	ld	r24, Z
 354:	82 b9       	out	0x02, r24	; 2
			mTimer(Delay_array[15-j]); 
 356:	f8 01       	movw	r30, r16
 358:	80 81       	ld	r24, Z
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
 360:	01 50       	subi	r16, 0x01	; 1
 362:	10 40       	sbci	r17, 0x00	; 0
			mTimer(delay); 

		}// end for

		
		for (int j=0;j<16;j++){
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	00 31       	cpi	r16, 0x10	; 16
 368:	1f 07       	cpc	r17, r31
 36a:	49 f7       	brne	.-46     	; 0x33e <MoveStepperRamp+0x11a>
			mTimer(Delay_array[15-j]); 

		}// end for
	} // end else

	Last_position = i;
 36c:	d0 93 29 01 	sts	0x0129, r29
 370:	c0 93 28 01 	sts	0x0128, r28
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	08 95       	ret

00000382 <MoveStepper180cw>:
}

// DESC: Rotates the stepper 180 degrees CW
void MoveStepper180cw()
{
	MoveStepperRamp(100, 1);
 382:	84 e6       	ldi	r24, 0x64	; 100
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
	mTimer(5); 
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
}
 396:	08 95       	ret

00000398 <MoveStepper90ccw>:
}

// DESC: Rotates the stepper 90 degrees CCW
void MoveStepper90ccw()
{
	MoveStepperRamp(50, 0);
 398:	82 e3       	ldi	r24, 0x32	; 50
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
	mTimer(5); 
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
}
 3ac:	08 95       	ret

000003ae <MoveStepper90cw>:


// DESC: Rotates the stepper 90 degrees CW
void MoveStepper90cw()
{
	MoveStepperRamp(50, 1);
 3ae:	82 e3       	ldi	r24, 0x32	; 50
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
	mTimer(5); 
 3ba:	85 e0       	ldi	r24, 0x05	; 5
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
}
 3c2:	08 95       	ret

000003c4 <TurnStepper>:
//################## FUNCTIONS ##################

// DESC: Turns the stepper to the necessary position
void TurnStepper()
{
	if (Exit_counter > Dequeue_counter)
 3c4:	20 91 30 01 	lds	r18, 0x0130
 3c8:	30 91 31 01 	lds	r19, 0x0131
 3cc:	80 91 2e 01 	lds	r24, 0x012E
 3d0:	90 91 2f 01 	lds	r25, 0x012F
 3d4:	82 17       	cp	r24, r18
 3d6:	93 07       	cpc	r25, r19
 3d8:	74 f4       	brge	.+28     	; 0x3f6 <TurnStepper+0x32>
	{
		Exit_counter = Dequeue_counter;
 3da:	80 91 2e 01 	lds	r24, 0x012E
 3de:	90 91 2f 01 	lds	r25, 0x012F
 3e2:	90 93 31 01 	sts	0x0131, r25
 3e6:	80 93 30 01 	sts	0x0130, r24
		SamePart = 0;
 3ea:	10 92 2d 01 	sts	0x012D, r1
		StepperDesiredPosition = StepperCurrentPosition;
 3ee:	80 91 2b 01 	lds	r24, 0x012B
 3f2:	80 93 2c 01 	sts	0x012C, r24
		//PORTD = 0b11110000;
	}


	if ((StepperDesiredPosition == StepperCurrentPosition) && (SamePart == 0) && (Dequeue_counter == Exit_counter)) 
 3f6:	90 91 2c 01 	lds	r25, 0x012C
 3fa:	80 91 2b 01 	lds	r24, 0x012B
 3fe:	98 17       	cp	r25, r24
 400:	09 f0       	breq	.+2      	; 0x404 <TurnStepper+0x40>
 402:	6d c0       	rjmp	.+218    	; 0x4de <TurnStepper+0x11a>
 404:	80 91 2d 01 	lds	r24, 0x012D
 408:	88 23       	and	r24, r24
 40a:	09 f0       	breq	.+2      	; 0x40e <TurnStepper+0x4a>
 40c:	68 c0       	rjmp	.+208    	; 0x4de <TurnStepper+0x11a>
 40e:	20 91 2e 01 	lds	r18, 0x012E
 412:	30 91 2f 01 	lds	r19, 0x012F
 416:	80 91 30 01 	lds	r24, 0x0130
 41a:	90 91 31 01 	lds	r25, 0x0131
 41e:	28 17       	cp	r18, r24
 420:	39 07       	cpc	r19, r25
 422:	09 f0       	breq	.+2      	; 0x426 <TurnStepper+0x62>
 424:	5c c0       	rjmp	.+184    	; 0x4de <TurnStepper+0x11a>


// DESC: Removes the link from the head of the list and assigns it to deQueuedLink
void dequeue(link **h, link **t, link **deQueuedLink){

	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 426:	e0 91 3b 01 	lds	r30, 0x013B
 42a:	f0 91 3c 01 	lds	r31, 0x013C
 42e:	f0 93 36 01 	sts	0x0136, r31
 432:	e0 93 35 01 	sts	0x0135, r30
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 436:	30 97       	sbiw	r30, 0x00	; 0
 438:	61 f0       	breq	.+24     	; 0x452 <TurnStepper+0x8e>
		*h = (*h)->next;
 43a:	83 81       	ldd	r24, Z+3	; 0x03
 43c:	94 81       	ldd	r25, Z+4	; 0x04
 43e:	90 93 3c 01 	sts	0x013C, r25
 442:	80 93 3b 01 	sts	0x013B, r24
		if (*h == NULL) {
 446:	89 2b       	or	r24, r25
 448:	21 f4       	brne	.+8      	; 0x452 <TurnStepper+0x8e>
		(*t) = NULL; 
 44a:	10 92 38 01 	sts	0x0138, r1
 44e:	10 92 37 01 	sts	0x0137, r1
	{
		dequeue(&head, &tail, &rtnLink);
		
		
		
		int temp = rtnLink->e.itemCode;
 452:	20 81       	ld	r18, Z
 454:	31 81       	ldd	r19, Z+1	; 0x01
	
		if (temp > 970) 
 456:	43 e0       	ldi	r20, 0x03	; 3
 458:	2b 3c       	cpi	r18, 0xCB	; 203
 45a:	34 07       	cpc	r19, r20
 45c:	1c f0       	brlt	.+6      	; 0x464 <TurnStepper+0xa0>
		{
			StepperDesiredPosition = 0;
 45e:	10 92 2c 01 	sts	0x012C, r1
 462:	2b c0       	rjmp	.+86     	; 0x4ba <TurnStepper+0xf6>
			{
				SamePart = 1;
			}//end if

		}//end if
		else if ((temp <= 970) && (temp > 850)) 
 464:	c9 01       	movw	r24, r18
 466:	83 55       	subi	r24, 0x53	; 83
 468:	93 40       	sbci	r25, 0x03	; 3
 46a:	88 37       	cpi	r24, 0x78	; 120
 46c:	91 05       	cpc	r25, r1
 46e:	10 f4       	brcc	.+4      	; 0x474 <TurnStepper+0xb0>
		{
			StepperDesiredPosition = 2;
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	21 c0       	rjmp	.+66     	; 0x4b6 <TurnStepper+0xf2>
			{
				SamePart = 1;
			}//end if

		}//end else if
		else if ((temp <= 850) && (temp > 300))
 474:	c9 01       	movw	r24, r18
 476:	8d 52       	subi	r24, 0x2D	; 45
 478:	91 40       	sbci	r25, 0x01	; 1
 47a:	86 52       	subi	r24, 0x26	; 38
 47c:	92 40       	sbci	r25, 0x02	; 2
 47e:	a8 f4       	brcc	.+42     	; 0x4aa <TurnStepper+0xe6>
		{
		
			StepperDesiredPosition = 1;
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	20 93 2c 01 	sts	0x012C, r18
			Dequeue_counter++;
 486:	80 91 2e 01 	lds	r24, 0x012E
 48a:	90 91 2f 01 	lds	r25, 0x012F
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	90 93 2f 01 	sts	0x012F, r25
 494:	80 93 2e 01 	sts	0x012E, r24
		
			if ((StepperDesiredPosition == StepperCurrentPosition))
 498:	90 91 2c 01 	lds	r25, 0x012C
 49c:	80 91 2b 01 	lds	r24, 0x012B
 4a0:	98 17       	cp	r25, r24
 4a2:	e9 f4       	brne	.+58     	; 0x4de <TurnStepper+0x11a>
			{
				SamePart = 1;
 4a4:	20 93 2d 01 	sts	0x012D, r18
 4a8:	1a c0       	rjmp	.+52     	; 0x4de <TurnStepper+0x11a>
			}//end if

		}//end else if
		else if ((temp <= 300) && (temp > 10))
 4aa:	2b 50       	subi	r18, 0x0B	; 11
 4ac:	30 40       	sbci	r19, 0x00	; 0
 4ae:	22 52       	subi	r18, 0x22	; 34
 4b0:	31 40       	sbci	r19, 0x01	; 1
 4b2:	a8 f4       	brcc	.+42     	; 0x4de <TurnStepper+0x11a>
		{
		
			StepperDesiredPosition = 3;
 4b4:	83 e0       	ldi	r24, 0x03	; 3
 4b6:	80 93 2c 01 	sts	0x012C, r24
			Dequeue_counter++;
 4ba:	80 91 2e 01 	lds	r24, 0x012E
 4be:	90 91 2f 01 	lds	r25, 0x012F
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	90 93 2f 01 	sts	0x012F, r25
 4c8:	80 93 2e 01 	sts	0x012E, r24
		
			if ((StepperDesiredPosition == StepperCurrentPosition))
 4cc:	90 91 2c 01 	lds	r25, 0x012C
 4d0:	80 91 2b 01 	lds	r24, 0x012B
 4d4:	98 17       	cp	r25, r24
 4d6:	19 f4       	brne	.+6      	; 0x4de <TurnStepper+0x11a>
			{
				SamePart = 1;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 2d 01 	sts	0x012D, r24

	}//end if

	

	if ((Dequeue_counter - Exit_counter) == 1)
 4de:	80 91 2e 01 	lds	r24, 0x012E
 4e2:	90 91 2f 01 	lds	r25, 0x012F
 4e6:	20 91 30 01 	lds	r18, 0x0130
 4ea:	30 91 31 01 	lds	r19, 0x0131
 4ee:	82 1b       	sub	r24, r18
 4f0:	93 0b       	sbc	r25, r19
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <TurnStepper+0x134>
 4f6:	50 c0       	rjmp	.+160    	; 0x598 <TurnStepper+0x1d4>
	{
	
		if ((StepperDesiredPosition-StepperCurrentPosition == 1) | (StepperDesiredPosition-StepperCurrentPosition == -3))
 4f8:	80 91 2c 01 	lds	r24, 0x012C
 4fc:	20 91 2b 01 	lds	r18, 0x012B
 500:	40 91 2c 01 	lds	r20, 0x012C
 504:	30 91 2b 01 	lds	r19, 0x012B
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	82 1b       	sub	r24, r18
 50c:	91 09       	sbc	r25, r1
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	39 f0       	breq	.+14     	; 0x520 <TurnStepper+0x15c>
 512:	84 2f       	mov	r24, r20
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	83 1b       	sub	r24, r19
 518:	91 09       	sbc	r25, r1
 51a:	8d 5f       	subi	r24, 0xFD	; 253
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	19 f4       	brne	.+6      	; 0x526 <TurnStepper+0x162>
		{		
			MoveStepper90cw();
 520:	0e 94 d7 01 	call	0x3ae	; 0x3ae <MoveStepper90cw>
 524:	16 c0       	rjmp	.+44     	; 0x552 <TurnStepper+0x18e>
			StepperCurrentPosition = StepperDesiredPosition;
			PORTB = 0b00000100;
		}//end if
		else if ((StepperDesiredPosition-StepperCurrentPosition == 2) | (StepperDesiredPosition-StepperCurrentPosition == -2))
 526:	80 91 2c 01 	lds	r24, 0x012C
 52a:	20 91 2b 01 	lds	r18, 0x012B
 52e:	40 91 2c 01 	lds	r20, 0x012C
 532:	30 91 2b 01 	lds	r19, 0x012B
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	82 1b       	sub	r24, r18
 53a:	91 09       	sbc	r25, r1
 53c:	02 97       	sbiw	r24, 0x02	; 2
 53e:	39 f0       	breq	.+14     	; 0x54e <TurnStepper+0x18a>
 540:	84 2f       	mov	r24, r20
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	83 1b       	sub	r24, r19
 546:	91 09       	sbc	r25, r1
 548:	8e 5f       	subi	r24, 0xFE	; 254
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	49 f4       	brne	.+18     	; 0x560 <TurnStepper+0x19c>
		{
			MoveStepper180cw();
 54e:	0e 94 c1 01 	call	0x382	; 0x382 <MoveStepper180cw>
			StepperCurrentPosition = StepperDesiredPosition;
 552:	80 91 2c 01 	lds	r24, 0x012C
 556:	80 93 2b 01 	sts	0x012B, r24
			PORTB = 0b00000100;
 55a:	84 e0       	ldi	r24, 0x04	; 4
 55c:	85 b9       	out	0x05, r24	; 5
 55e:	08 95       	ret
		}//end else if
		else if ((StepperDesiredPosition-StepperCurrentPosition == 3) | (StepperDesiredPosition-StepperCurrentPosition == -1))	
 560:	80 91 2c 01 	lds	r24, 0x012C
 564:	20 91 2b 01 	lds	r18, 0x012B
 568:	40 91 2c 01 	lds	r20, 0x012C
 56c:	30 91 2b 01 	lds	r19, 0x012B
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	82 1b       	sub	r24, r18
 574:	91 09       	sbc	r25, r1
 576:	03 97       	sbiw	r24, 0x03	; 3
 578:	39 f0       	breq	.+14     	; 0x588 <TurnStepper+0x1c4>
 57a:	84 2f       	mov	r24, r20
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	83 1b       	sub	r24, r19
 580:	91 09       	sbc	r25, r1
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	41 f4       	brne	.+16     	; 0x598 <TurnStepper+0x1d4>
		{
			MoveStepper90ccw();
 588:	0e 94 cc 01 	call	0x398	; 0x398 <MoveStepper90ccw>
			StepperCurrentPosition = StepperDesiredPosition;
 58c:	80 91 2c 01 	lds	r24, 0x012C
 590:	80 93 2b 01 	sts	0x012B, r24
			PORTB = 0b00000100;
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	85 b9       	out	0x05, r24	; 5
 598:	08 95       	ret

0000059a <__vector_default>:
		enqueue(&head, &tail, &newLink);
	}//end else		
}

ISR(BADISR_vect)
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	0b b6       	in	r0, 0x3b	; 59
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	2f 93       	push	r18
 5aa:	3f 93       	push	r19
 5ac:	4f 93       	push	r20
 5ae:	5f 93       	push	r21
 5b0:	6f 93       	push	r22
 5b2:	7f 93       	push	r23
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	af 93       	push	r26
 5ba:	bf 93       	push	r27
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
	PORTC = 0b11111111;
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11110000;	
 5c4:	80 ef       	ldi	r24, 0xF0	; 240
 5c6:	8b b9       	out	0x0b, r24	; 11
	mTimer(50000);
 5c8:	80 e5       	ldi	r24, 0x50	; 80
 5ca:	93 ec       	ldi	r25, 0xC3	; 195
 5cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
}
 5d0:	ff 91       	pop	r31
 5d2:	ef 91       	pop	r30
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	7f 91       	pop	r23
 5de:	6f 91       	pop	r22
 5e0:	5f 91       	pop	r21
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	0f 90       	pop	r0
 5ea:	0b be       	out	0x3b, r0	; 59
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <InitializeStepper>:

}


void InitializeStepper()
{
 5f6:	0f 93       	push	r16
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	c0 e0       	ldi	r28, 0x00	; 0
 600:	d0 e0       	ldi	r29, 0x00	; 0
 602:	00 e1       	ldi	r16, 0x10	; 16
 604:	10 e0       	ldi	r17, 0x00	; 0
 606:	17 c0       	rjmp	.+46     	; 0x636 <InitializeStepper+0x40>
	int j=16;
	int i=0;	// Assumed current step is 0
	while(StepperInitialized == 0 ) 
	{
		i++;
 608:	21 96       	adiw	r28, 0x01	; 1
		// Goes through the step positions in the array in increasing order
		if(i>3) i=0;
 60a:	c4 30       	cpi	r28, 0x04	; 4
 60c:	d1 05       	cpc	r29, r1
 60e:	14 f0       	brlt	.+4      	; 0x614 <InitializeStepper+0x1e>
 610:	c0 e0       	ldi	r28, 0x00	; 0
 612:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = Position_array[i];
 614:	fe 01       	movw	r30, r28
 616:	eb 5f       	subi	r30, 0xFB	; 251
 618:	fe 4f       	sbci	r31, 0xFE	; 254
 61a:	80 81       	ld	r24, Z
 61c:	82 b9       	out	0x02, r24	; 2
		mTimer(j);
 61e:	c8 01       	movw	r24, r16
 620:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
		if (j>7)
 624:	08 30       	cpi	r16, 0x08	; 8
 626:	11 05       	cpc	r17, r1
 628:	14 f0       	brlt	.+4      	; 0x62e <InitializeStepper+0x38>
		{
		j--;
 62a:	01 50       	subi	r16, 0x01	; 1
 62c:	10 40       	sbci	r17, 0x00	; 0
		} 
		Last_position =i;
 62e:	d0 93 29 01 	sts	0x0129, r29
 632:	c0 93 28 01 	sts	0x0128, r28

void InitializeStepper()
{
	int j=16;
	int i=0;	// Assumed current step is 0
	while(StepperInitialized == 0 ) 
 636:	80 91 2a 01 	lds	r24, 0x012A
 63a:	88 23       	and	r24, r24
 63c:	29 f3       	breq	.-54     	; 0x608 <InitializeStepper+0x12>
		} 
		Last_position =i;
	}//end while 
	

}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	08 95       	ret

00000648 <MoveStepper>:

void MoveStepper(int steps, int direction, int delay){
 648:	cf 92       	push	r12
 64a:	df 92       	push	r13
 64c:	ef 92       	push	r14
 64e:	ff 92       	push	r15
 650:	0f 93       	push	r16
 652:	1f 93       	push	r17
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	6c 01       	movw	r12, r24
 65a:	7a 01       	movw	r14, r20

	int i = Last_position;
 65c:	c0 91 28 01 	lds	r28, 0x0128
 660:	d0 91 29 01 	lds	r29, 0x0129

	if (direction ==0 ) { // clockwise
 664:	67 2b       	or	r22, r23
 666:	19 f0       	breq	.+6      	; 0x66e <MoveStepper+0x26>
 668:	00 e0       	ldi	r16, 0x00	; 0
 66a:	10 e0       	ldi	r17, 0x00	; 0
 66c:	26 c0       	rjmp	.+76     	; 0x6ba <MoveStepper+0x72>
 66e:	00 e0       	ldi	r16, 0x00	; 0
 670:	10 e0       	ldi	r17, 0x00	; 0
 672:	10 c0       	rjmp	.+32     	; 0x694 <MoveStepper+0x4c>
		
		for (int j=0;j<steps;j++){
			i++;
 674:	21 96       	adiw	r28, 0x01	; 1
			// Goes through the step positions in the array in increasing order
			if(i>3) i=0;
 676:	c4 30       	cpi	r28, 0x04	; 4
 678:	d1 05       	cpc	r29, r1
 67a:	14 f0       	brlt	.+4      	; 0x680 <MoveStepper+0x38>
 67c:	c0 e0       	ldi	r28, 0x00	; 0
 67e:	d0 e0       	ldi	r29, 0x00	; 0
			
			PORTA = Position_array[i];
 680:	fe 01       	movw	r30, r28
 682:	eb 5f       	subi	r30, 0xFB	; 251
 684:	fe 4f       	sbci	r31, 0xFE	; 254
 686:	80 81       	ld	r24, Z
 688:	82 b9       	out	0x02, r24	; 2
			mTimer(delay); 
 68a:	c7 01       	movw	r24, r14
 68c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>

	int i = Last_position;

	if (direction ==0 ) { // clockwise
		
		for (int j=0;j<steps;j++){
 690:	0f 5f       	subi	r16, 0xFF	; 255
 692:	1f 4f       	sbci	r17, 0xFF	; 255
 694:	0c 15       	cp	r16, r12
 696:	1d 05       	cpc	r17, r13
 698:	6c f3       	brlt	.-38     	; 0x674 <MoveStepper+0x2c>
 69a:	12 c0       	rjmp	.+36     	; 0x6c0 <MoveStepper+0x78>
	
	else {	// counter clockwise
		
		// Goes through the step positions in the array in reverse order
		for (int j=0;j<steps;j++){
			i--;
 69c:	21 97       	sbiw	r28, 0x01	; 1
			// Goes through the step positions in the array in increasing order
			if(i<0) i=3;
 69e:	d7 ff       	sbrs	r29, 7
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <MoveStepper+0x5e>
 6a2:	c3 e0       	ldi	r28, 0x03	; 3
 6a4:	d0 e0       	ldi	r29, 0x00	; 0
			
			PORTA = Position_array[i];
 6a6:	fe 01       	movw	r30, r28
 6a8:	eb 5f       	subi	r30, 0xFB	; 251
 6aa:	fe 4f       	sbci	r31, 0xFE	; 254
 6ac:	80 81       	ld	r24, Z
 6ae:	82 b9       	out	0x02, r24	; 2
			mTimer(delay); 
 6b0:	c7 01       	movw	r24, r14
 6b2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>

	
	else {	// counter clockwise
		
		// Goes through the step positions in the array in reverse order
		for (int j=0;j<steps;j++){
 6b6:	0f 5f       	subi	r16, 0xFF	; 255
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	0c 15       	cp	r16, r12
 6bc:	1d 05       	cpc	r17, r13
 6be:	74 f3       	brlt	.-36     	; 0x69c <MoveStepper+0x54>
			mTimer(delay); 
			//PORTC = Position_array[i];
		}//end for
	}//end else

	Last_position = i;
 6c0:	d0 93 29 01 	sts	0x0129, r29
 6c4:	c0 93 28 01 	sts	0x0128, r28


}
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	08 95       	ret

000006da <PauseButton>:


void PauseButton()
{
	mTimer(100);
 6da:	84 e6       	ldi	r24, 0x64	; 100
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
	PORTD = 0b11000000;
 6e2:	80 ec       	ldi	r24, 0xC0	; 192
 6e4:	8b b9       	out	0x0b, r24	; 11

	if(Pause == 0)
 6e6:	80 91 33 01 	lds	r24, 0x0133
 6ea:	88 23       	and	r24, r24
 6ec:	21 f4       	brne	.+8      	; 0x6f6 <PauseButton+0x1c>
	{
		Pause = 1;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	80 93 33 01 	sts	0x0133, r24
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <PauseButton+0x20>
	}
	else
	{
		Pause = 0;
 6f6:	10 92 33 01 	sts	0x0133, r1
	}

	PORTC = Pause;
 6fa:	80 91 33 01 	lds	r24, 0x0133
 6fe:	88 b9       	out	0x08, r24	; 8
	mTimer(100);
 700:	84 e6       	ldi	r24, 0x64	; 100
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
	STATE = 0;
 708:	10 92 00 01 	sts	0x0100, r1

}
 70c:	08 95       	ret

0000070e <RampDownButton>:

void RampDownButton()
{
	mTimer(100);
 70e:	84 e6       	ldi	r24, 0x64	; 100
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
	PORTD = 0b00110000;
 716:	80 e3       	ldi	r24, 0x30	; 48
 718:	8b b9       	out	0x0b, r24	; 11

	if(RampDown == 0)
 71a:	80 91 34 01 	lds	r24, 0x0134
 71e:	88 23       	and	r24, r24
 720:	21 f4       	brne	.+8      	; 0x72a <RampDownButton+0x1c>
	{
		RampDown = 1;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	80 93 34 01 	sts	0x0134, r24
 728:	02 c0       	rjmp	.+4      	; 0x72e <RampDownButton+0x20>
	}
	else
	{
		RampDown = 0;
 72a:	10 92 34 01 	sts	0x0134, r1
	}

	PORTC = RampDown<<4;
 72e:	80 91 34 01 	lds	r24, 0x0134
 732:	82 95       	swap	r24
 734:	80 7f       	andi	r24, 0xF0	; 240
 736:	88 b9       	out	0x08, r24	; 8
	mTimer(100);
 738:	84 e6       	ldi	r24, 0x64	; 100
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
	STATE = 0;
 740:	10 92 00 01 	sts	0x0100, r1

}
 744:	08 95       	ret

00000746 <main>:
//################## MAIN ROUTINE ##################
int main(int argc, char *argv[])
{

	// Output Ports
	DDRA = 0b11111111; // Signal to Stepper
 746:	9f ef       	ldi	r25, 0xFF	; 255
 748:	91 b9       	out	0x01, r25	; 1
	DDRB = 0b10101111; // PWM Output A for Timer/Counter0 or PWM Output B for Timer/Counter1 (bit 7)
 74a:	8f ea       	ldi	r24, 0xAF	; 175
 74c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111; // LEDs display
 74e:	97 b9       	out	0x07, r25	; 7

	// Input Ports
	DDRD = 0b11110000; // External Interrupts 0 to 3 (bits 0 to 3)
 750:	80 ef       	ldi	r24, 0xF0	; 240
 752:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0b00000000; // External Interrupts 7 to 4 (bits 4 to 7)
 754:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0b00000000; // ADC Input Channel 1 (bit 1)
 756:	10 ba       	out	0x10, r1	; 16

	// Timers
	TCCR1B |=_BV(CS10); // Timer/Counter Control Register B for Timer 1, Chooses no prescaler, the frequency is 8MHz.
 758:	80 91 81 00 	lds	r24, 0x0081
 75c:	81 60       	ori	r24, 0x01	; 1
 75e:	80 93 81 00 	sts	0x0081, r24
	TCCR0B |=_BV(CS01); // Timer/Counter Control Register B for Timer 0 (PWM), Chooses no prescaler, the frequency is 1 MHz.
 762:	85 b5       	in	r24, 0x25	; 37
 764:	82 60       	ori	r24, 0x02	; 2
 766:	85 bd       	out	0x25, r24	; 37
	TCCR0A |=_BV(WGM00) | _BV(WGM01); // Timer/Counter Control0 Register A for Timer 0 
 768:	84 b5       	in	r24, 0x24	; 36
 76a:	83 60       	ori	r24, 0x03	; 3
 76c:	84 bd       	out	0x24, r24	; 36

//################## LINKED LIST FUNCTIONS ##################

// DESC: initializes the linked queue to 'NULL' status
void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 76e:	10 92 3c 01 	sts	0x013C, r1
 772:	10 92 3b 01 	sts	0x013B, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 776:	10 92 38 01 	sts	0x0138, r1
 77a:	10 92 37 01 	sts	0x0137, r1
	//initLink(&newLink);
	//newLink->e.itemCode = 0;
	//enqueue(&head, &tail, &newLink);

	// DC Motor Setup
	TCCR0A |=_BV(COM0A1);// Set compare output mode for fast PWM to clear OC0A on compare match, set OC0A at TOP
 77e:	84 b5       	in	r24, 0x24	; 36
 780:	80 68       	ori	r24, 0x80	; 128
 782:	84 bd       	out	0x24, r24	; 36
	PORTB |= 0b00000100;
 784:	2a 9a       	sbi	0x05, 2	; 5
	OCR0A = 60;
 786:	8c e3       	ldi	r24, 0x3C	; 60
 788:	87 bd       	out	0x27, r24	; 39

	// ADC Setup
	// by default, the ADC input (analog input is set to be ADC0 / PORTF0)
	ADCSRA |= _BV(ADEN); // enable ADC
 78a:	80 91 7a 00 	lds	r24, 0x007A
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADIE); // converson complete enable interrupt of ADC
 794:	80 91 7a 00 	lds	r24, 0x007A
 798:	88 60       	ori	r24, 0x08	; 8
 79a:	80 93 7a 00 	sts	0x007A, r24
	//ADMUX |= _BV(ADLAR) | _BV(REFS0); // ADLAR sets left justified, which is fine for 8 bits. The REFS0 sets voltage reference to AVcc with external capacitor AREF
	//ADCSRA |= _BV(ADPS0);	pre-scaler = 1/8
	//ADCSRA |= _BV(ADPS1); 
	ADMUX |= _BV(REFS0) | _BV(MUX0);
 79e:	80 91 7c 00 	lds	r24, 0x007C
 7a2:	81 64       	ori	r24, 0x41	; 65
 7a4:	80 93 7c 00 	sts	0x007C, r24

	// Interrupt Setup
	cli();	// Disables all interrupts
 7a8:	f8 94       	cli
	EICRA |= _BV(ISC01) | _BV(ISC10) | _BV(ISC21) | _BV(ISC30); // | _BV(ISC31); This gives PORTD0-3 a falling/rising edge
 7aa:	80 91 69 00 	lds	r24, 0x0069
 7ae:	86 66       	ori	r24, 0x66	; 102
 7b0:	80 93 69 00 	sts	0x0069, r24

	//EIMSK |= _BV(INT0); // Interrupt Enable PIN D0
	EIMSK |= _BV(INT1); // Interrupt Enable PIN D1
 7b4:	e9 9a       	sbi	0x1d, 1	; 29
	EIMSK |= _BV(INT2); // Interrupt Enable PIN D2
 7b6:	ea 9a       	sbi	0x1d, 2	; 29
	EIMSK |= _BV(INT3); // Interrupt Enable PIN D3
 7b8:	eb 9a       	sbi	0x1d, 3	; 29

	sei();	// Note this sets the Global Enable for all interrupts
 7ba:	78 94       	sei


	while (1)
	{
	
		switch(STATE)
 7bc:	80 91 00 01 	lds	r24, 0x0100
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	f1 f1       	breq	.+124    	; 0x840 <main+0xfa>
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	28 f0       	brcs	.+10     	; 0x7d2 <main+0x8c>
 7c8:	82 30       	cpi	r24, 0x02	; 2
 7ca:	e9 f1       	breq	.+122    	; 0x846 <main+0x100>
 7cc:	84 30       	cpi	r24, 0x04	; 4
 7ce:	b1 f7       	brne	.-20     	; 0x7bc <main+0x76>
 7d0:	3d c0       	rjmp	.+122    	; 0x84c <main+0x106>
		{
			case (0) :
				//TurnStepper();
				mTimer(20);
 7d2:	84 e1       	ldi	r24, 0x14	; 20
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
				MoveStepperRamp(50,0);
 7da:	82 e3       	ldi	r24, 0x32	; 50
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
				mTimer(200);
 7e6:	88 ec       	ldi	r24, 0xC8	; 200
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
				MoveStepperRamp(50,1);
 7ee:	82 e3       	ldi	r24, 0x32	; 50
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
				mTimer(200);
 7fa:	88 ec       	ldi	r24, 0xC8	; 200
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
				MoveStepperRamp(50,0);
 802:	82 e3       	ldi	r24, 0x32	; 50
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
				mTimer(200);
 80e:	88 ec       	ldi	r24, 0xC8	; 200
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
				MoveStepperRamp(50,1);
 816:	82 e3       	ldi	r24, 0x32	; 50
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	61 e0       	ldi	r22, 0x01	; 1
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
				mTimer(200);
 822:	88 ec       	ldi	r24, 0xC8	; 200
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
				MoveStepperRamp(50,0);
 82a:	82 e3       	ldi	r24, 0x32	; 50
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	0e 94 12 01 	call	0x224	; 0x224 <MoveStepperRamp>
				mTimer(200);
 836:	88 ec       	ldi	r24, 0xC8	; 200
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mTimer>
 83e:	be cf       	rjmp	.-132    	; 0x7bc <main+0x76>

				break;	
			case (1) :
				PauseButton();
 840:	0e 94 6d 03 	call	0x6da	; 0x6da <PauseButton>
 844:	bb cf       	rjmp	.-138    	; 0x7bc <main+0x76>
				break;
			case (2) :
				RampDownButton();
 846:	0e 94 87 03 	call	0x70e	; 0x70e <RampDownButton>
 84a:	b8 cf       	rjmp	.-144    	; 0x7bc <main+0x76>
			break;
			case (4) :
				InitializeStepper();
 84c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <InitializeStepper>
 850:	b5 cf       	rjmp	.-150    	; 0x7bc <main+0x76>

00000852 <setup>:
}

//################## LINKED LIST FUNCTIONS ##################

// DESC: initializes the linked queue to 'NULL' status
void setup(link **h,link **t){
 852:	fc 01       	movw	r30, r24
 854:	db 01       	movw	r26, r22
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 856:	11 82       	std	Z+1, r1	; 0x01
 858:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 85a:	1d 92       	st	X+, r1
 85c:	1c 92       	st	X, r1
	return;
}
 85e:	08 95       	ret

00000860 <enqueue>:
	return;
}


// DESC: Accepts as input a new link by reference, and assigns the head and tail of the queue accordingly				
void enqueue(link **h, link **t, link **nL){
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	9c 01       	movw	r18, r24
 866:	db 01       	movw	r26, r22
 868:	fa 01       	movw	r30, r20

	if (*t != NULL){
 86a:	cd 91       	ld	r28, X+
 86c:	dc 91       	ld	r29, X
 86e:	11 97       	sbiw	r26, 0x01	; 1
 870:	80 81       	ld	r24, Z
 872:	91 81       	ldd	r25, Z+1	; 0x01
 874:	20 97       	sbiw	r28, 0x00	; 0
 876:	19 f0       	breq	.+6      	; 0x87e <enqueue+0x1e>
		/* Not an empty queue */
		(*t)->next = *nL;
 878:	9c 83       	std	Y+4, r25	; 0x04
 87a:	8b 83       	std	Y+3, r24	; 0x03
 87c:	03 c0       	rjmp	.+6      	; 0x884 <enqueue+0x24>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 87e:	e9 01       	movw	r28, r18
 880:	99 83       	std	Y+1, r25	; 0x01
 882:	88 83       	st	Y, r24
		*t = *nL;
 884:	80 81       	ld	r24, Z
 886:	91 81       	ldd	r25, Z+1	; 0x01
 888:	8d 93       	st	X+, r24
 88a:	9c 93       	st	X, r25
	
	}/* else */
	return;
}
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	08 95       	ret

00000892 <dequeue>:



// DESC: Removes the link from the head of the list and assigns it to deQueuedLink
void dequeue(link **h, link **t, link **deQueuedLink){
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	dc 01       	movw	r26, r24
 898:	eb 01       	movw	r28, r22
 89a:	fa 01       	movw	r30, r20

	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 89c:	8d 91       	ld	r24, X+
 89e:	9c 91       	ld	r25, X
 8a0:	11 97       	sbiw	r26, 0x01	; 1
 8a2:	91 83       	std	Z+1, r25	; 0x01
 8a4:	80 83       	st	Z, r24
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 8a6:	ed 91       	ld	r30, X+
 8a8:	fc 91       	ld	r31, X
 8aa:	11 97       	sbiw	r26, 0x01	; 1
 8ac:	30 97       	sbiw	r30, 0x00	; 0
 8ae:	41 f0       	breq	.+16     	; 0x8c0 <dequeue+0x2e>
		*h = (*h)->next;
 8b0:	83 81       	ldd	r24, Z+3	; 0x03
 8b2:	94 81       	ldd	r25, Z+4	; 0x04
 8b4:	8d 93       	st	X+, r24
 8b6:	9c 93       	st	X, r25
		if (*h == NULL) {
 8b8:	89 2b       	or	r24, r25
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <dequeue+0x2e>
		(*t) = NULL; 
 8bc:	19 82       	std	Y+1, r1	; 0x01
 8be:	18 82       	st	Y, r1
		}
	}/*if*/
	
	return;
}
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	08 95       	ret

000008c6 <firstValue>:

// DESC: Peeks at the first element in the list
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
 8c6:	df 93       	push	r29
 8c8:	cf 93       	push	r28
 8ca:	00 d0       	rcall	.+0      	; 0x8cc <firstValue+0x6>
 8cc:	0f 92       	push	r0
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	fc 01       	movw	r30, r24
	return((*h)->e);
 8d4:	de 01       	movw	r26, r28
 8d6:	11 96       	adiw	r26, 0x01	; 1
 8d8:	20 81       	ld	r18, Z
 8da:	31 81       	ldd	r19, Z+1	; 0x01
 8dc:	c9 01       	movw	r24, r18
 8de:	fc 01       	movw	r30, r24
 8e0:	83 e0       	ldi	r24, 0x03	; 3
 8e2:	01 90       	ld	r0, Z+
 8e4:	0d 92       	st	X+, r0
 8e6:	81 50       	subi	r24, 0x01	; 1
 8e8:	e1 f7       	brne	.-8      	; 0x8e2 <firstValue+0x1c>
 8ea:	69 81       	ldd	r22, Y+1	; 0x01
 8ec:	7a 81       	ldd	r23, Y+2	; 0x02
}
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	0f 90       	pop	r0
 8f8:	cf 91       	pop	r28
 8fa:	df 91       	pop	r29
 8fc:	08 95       	ret

000008fe <clearQueue>:


// DESC: deallocates (frees) all the memory consumed by the Queue
void clearQueue(link **h, link **t){
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	ec 01       	movw	r28, r24
 908:	8b 01       	movw	r16, r22
 90a:	07 c0       	rjmp	.+14     	; 0x91a <clearQueue+0x1c>

	link *temp;

	while (*h != NULL){
		temp = *h;
		*h=(*h)->next;
 90c:	83 81       	ldd	r24, Z+3	; 0x03
 90e:	94 81       	ldd	r25, Z+4	; 0x04
 910:	99 83       	std	Y+1, r25	; 0x01
 912:	88 83       	st	Y, r24
		free(temp);
 914:	cf 01       	movw	r24, r30
 916:	0e 94 d5 05 	call	0xbaa	; 0xbaa <free>
// DESC: deallocates (frees) all the memory consumed by the Queue
void clearQueue(link **h, link **t){

	link *temp;

	while (*h != NULL){
 91a:	e8 81       	ld	r30, Y
 91c:	f9 81       	ldd	r31, Y+1	; 0x01
 91e:	30 97       	sbiw	r30, 0x00	; 0
 920:	a9 f7       	brne	.-22     	; 0x90c <clearQueue+0xe>
		*h=(*h)->next;
		free(temp);
	}/*while*/
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		
 922:	f8 01       	movw	r30, r16
 924:	11 82       	std	Z+1, r1	; 0x01
 926:	10 82       	st	Z, r1

	return;
}
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	08 95       	ret

00000932 <initLink>:




// DESC: This initializes a link and returns the pointer to the new link or NULL if error 
void initLink(link **newLink){
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	8c 01       	movw	r16, r24
	//link *l;
	*newLink = malloc(sizeof(link));
 938:	85 e0       	ldi	r24, 0x05	; 5
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 28 05 	call	0xa50	; 0xa50 <malloc>
 940:	fc 01       	movw	r30, r24
 942:	d8 01       	movw	r26, r16
 944:	8d 93       	st	X+, r24
 946:	9c 93       	st	X, r25
	(*newLink)->next = NULL;
 948:	14 82       	std	Z+4, r1	; 0x04
 94a:	13 82       	std	Z+3, r1	; 0x03
	return;
}
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	08 95       	ret

00000952 <__vector_29>:



// the interrupt will be trigured if the ADC is done 
ISR(ADC_vect)
{
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	0b b6       	in	r0, 0x3b	; 59
 95c:	0f 92       	push	r0
 95e:	11 24       	eor	r1, r1
 960:	2f 93       	push	r18
 962:	3f 93       	push	r19
 964:	4f 93       	push	r20
 966:	5f 93       	push	r21
 968:	6f 93       	push	r22
 96a:	7f 93       	push	r23
 96c:	8f 93       	push	r24
 96e:	9f 93       	push	r25
 970:	af 93       	push	r26
 972:	bf 93       	push	r27
 974:	ef 93       	push	r30
 976:	ff 93       	push	r31
	if ( ADC < Lowest_value) 
 978:	20 91 78 00 	lds	r18, 0x0078
 97c:	30 91 79 00 	lds	r19, 0x0079
 980:	80 91 0e 01 	lds	r24, 0x010E
 984:	90 91 0f 01 	lds	r25, 0x010F
 988:	28 17       	cp	r18, r24
 98a:	39 07       	cpc	r19, r25
 98c:	b0 f4       	brcc	.+44     	; 0x9ba <__vector_29+0x68>
	{
	
		Lowest_value = ADC;	
 98e:	80 91 78 00 	lds	r24, 0x0078
 992:	90 91 79 00 	lds	r25, 0x0079
 996:	90 93 0f 01 	sts	0x010F, r25
 99a:	80 93 0e 01 	sts	0x010E, r24
		Lowest_value_low = ADCL;
 99e:	80 91 78 00 	lds	r24, 0x0078
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	90 93 0b 01 	sts	0x010B, r25
 9a8:	80 93 0a 01 	sts	0x010A, r24
		Lowest_value_high = ADCH;		
 9ac:	80 91 79 00 	lds	r24, 0x0079
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	90 93 0d 01 	sts	0x010D, r25
 9b6:	80 93 0c 01 	sts	0x010C, r24
	}//end if	
	

	if (PartPastSensor == 0)
 9ba:	80 91 09 01 	lds	r24, 0x0109
 9be:	88 23       	and	r24, r24
 9c0:	31 f4       	brne	.+12     	; 0x9ce <__vector_29+0x7c>
	{
		ADCSRA |= _BV(ADSC);
 9c2:	80 91 7a 00 	lds	r24, 0x007A
 9c6:	80 64       	ori	r24, 0x40	; 64
 9c8:	80 93 7a 00 	sts	0x007A, r24
 9cc:	2e c0       	rjmp	.+92     	; 0xa2a <__vector_29+0xd8>
	}//end if	
	else
	{
		PORTC = Lowest_value_low; // Display ADC result on LEDs
 9ce:	80 91 0a 01 	lds	r24, 0x010A
 9d2:	90 91 0b 01 	lds	r25, 0x010B
 9d6:	88 b9       	out	0x08, r24	; 8
		PORTD = Lowest_value_high<<5;
 9d8:	80 91 0c 01 	lds	r24, 0x010C
 9dc:	90 91 0d 01 	lds	r25, 0x010D
 9e0:	82 95       	swap	r24
 9e2:	88 0f       	add	r24, r24
 9e4:	80 7e       	andi	r24, 0xE0	; 224
 9e6:	8b b9       	out	0x0b, r24	; 11
			
		initLink(&newLink);
 9e8:	8d e3       	ldi	r24, 0x3D	; 61
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	0e 94 99 04 	call	0x932	; 0x932 <initLink>
		newLink->e.itemCode = Lowest_value;
 9f0:	e0 91 3d 01 	lds	r30, 0x013D
 9f4:	f0 91 3e 01 	lds	r31, 0x013E
 9f8:	80 91 0e 01 	lds	r24, 0x010E
 9fc:	90 91 0f 01 	lds	r25, 0x010F
 a00:	91 83       	std	Z+1, r25	; 0x01
 a02:	80 83       	st	Z, r24


// DESC: Accepts as input a new link by reference, and assigns the head and tail of the queue accordingly				
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 a04:	a0 91 37 01 	lds	r26, 0x0137
 a08:	b0 91 38 01 	lds	r27, 0x0138
 a0c:	10 97       	sbiw	r26, 0x00	; 0
 a0e:	29 f0       	breq	.+10     	; 0xa1a <__vector_29+0xc8>
		/* Not an empty queue */
		(*t)->next = *nL;
 a10:	14 96       	adiw	r26, 0x04	; 4
 a12:	fc 93       	st	X, r31
 a14:	ee 93       	st	-X, r30
 a16:	13 97       	sbiw	r26, 0x03	; 3
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__vector_29+0xd0>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 a1a:	f0 93 3c 01 	sts	0x013C, r31
 a1e:	e0 93 3b 01 	sts	0x013B, r30
		*t = *nL;
 a22:	f0 93 38 01 	sts	0x0138, r31
 a26:	e0 93 37 01 	sts	0x0137, r30
			
		initLink(&newLink);
		newLink->e.itemCode = Lowest_value;
		enqueue(&head, &tail, &newLink);
	}//end else		
}
 a2a:	ff 91       	pop	r31
 a2c:	ef 91       	pop	r30
 a2e:	bf 91       	pop	r27
 a30:	af 91       	pop	r26
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	7f 91       	pop	r23
 a38:	6f 91       	pop	r22
 a3a:	5f 91       	pop	r21
 a3c:	4f 91       	pop	r20
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	0f 90       	pop	r0
 a44:	0b be       	out	0x3b, r0	; 59
 a46:	0f 90       	pop	r0
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	0f 90       	pop	r0
 a4c:	1f 90       	pop	r1
 a4e:	18 95       	reti

00000a50 <malloc>:
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	bc 01       	movw	r22, r24
 a56:	82 30       	cpi	r24, 0x02	; 2
 a58:	91 05       	cpc	r25, r1
 a5a:	10 f4       	brcc	.+4      	; 0xa60 <malloc+0x10>
 a5c:	62 e0       	ldi	r22, 0x02	; 2
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	a0 91 41 01 	lds	r26, 0x0141
 a64:	b0 91 42 01 	lds	r27, 0x0142
 a68:	ed 01       	movw	r28, r26
 a6a:	e0 e0       	ldi	r30, 0x00	; 0
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	40 e0       	ldi	r20, 0x00	; 0
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	21 c0       	rjmp	.+66     	; 0xab6 <malloc+0x66>
 a74:	88 81       	ld	r24, Y
 a76:	99 81       	ldd	r25, Y+1	; 0x01
 a78:	86 17       	cp	r24, r22
 a7a:	97 07       	cpc	r25, r23
 a7c:	69 f4       	brne	.+26     	; 0xa98 <malloc+0x48>
 a7e:	8a 81       	ldd	r24, Y+2	; 0x02
 a80:	9b 81       	ldd	r25, Y+3	; 0x03
 a82:	30 97       	sbiw	r30, 0x00	; 0
 a84:	19 f0       	breq	.+6      	; 0xa8c <malloc+0x3c>
 a86:	93 83       	std	Z+3, r25	; 0x03
 a88:	82 83       	std	Z+2, r24	; 0x02
 a8a:	04 c0       	rjmp	.+8      	; 0xa94 <malloc+0x44>
 a8c:	90 93 42 01 	sts	0x0142, r25
 a90:	80 93 41 01 	sts	0x0141, r24
 a94:	fe 01       	movw	r30, r28
 a96:	34 c0       	rjmp	.+104    	; 0xb00 <malloc+0xb0>
 a98:	68 17       	cp	r22, r24
 a9a:	79 07       	cpc	r23, r25
 a9c:	38 f4       	brcc	.+14     	; 0xaac <malloc+0x5c>
 a9e:	41 15       	cp	r20, r1
 aa0:	51 05       	cpc	r21, r1
 aa2:	19 f0       	breq	.+6      	; 0xaaa <malloc+0x5a>
 aa4:	84 17       	cp	r24, r20
 aa6:	95 07       	cpc	r25, r21
 aa8:	08 f4       	brcc	.+2      	; 0xaac <malloc+0x5c>
 aaa:	ac 01       	movw	r20, r24
 aac:	fe 01       	movw	r30, r28
 aae:	8a 81       	ldd	r24, Y+2	; 0x02
 ab0:	9b 81       	ldd	r25, Y+3	; 0x03
 ab2:	9c 01       	movw	r18, r24
 ab4:	e9 01       	movw	r28, r18
 ab6:	20 97       	sbiw	r28, 0x00	; 0
 ab8:	e9 f6       	brne	.-70     	; 0xa74 <malloc+0x24>
 aba:	41 15       	cp	r20, r1
 abc:	51 05       	cpc	r21, r1
 abe:	a9 f1       	breq	.+106    	; 0xb2a <malloc+0xda>
 ac0:	ca 01       	movw	r24, r20
 ac2:	86 1b       	sub	r24, r22
 ac4:	97 0b       	sbc	r25, r23
 ac6:	04 97       	sbiw	r24, 0x04	; 4
 ac8:	08 f4       	brcc	.+2      	; 0xacc <malloc+0x7c>
 aca:	ba 01       	movw	r22, r20
 acc:	e0 e0       	ldi	r30, 0x00	; 0
 ace:	f0 e0       	ldi	r31, 0x00	; 0
 ad0:	2a c0       	rjmp	.+84     	; 0xb26 <malloc+0xd6>
 ad2:	8d 91       	ld	r24, X+
 ad4:	9c 91       	ld	r25, X
 ad6:	11 97       	sbiw	r26, 0x01	; 1
 ad8:	84 17       	cp	r24, r20
 ada:	95 07       	cpc	r25, r21
 adc:	f9 f4       	brne	.+62     	; 0xb1c <malloc+0xcc>
 ade:	64 17       	cp	r22, r20
 ae0:	75 07       	cpc	r23, r21
 ae2:	81 f4       	brne	.+32     	; 0xb04 <malloc+0xb4>
 ae4:	12 96       	adiw	r26, 0x02	; 2
 ae6:	8d 91       	ld	r24, X+
 ae8:	9c 91       	ld	r25, X
 aea:	13 97       	sbiw	r26, 0x03	; 3
 aec:	30 97       	sbiw	r30, 0x00	; 0
 aee:	19 f0       	breq	.+6      	; 0xaf6 <malloc+0xa6>
 af0:	93 83       	std	Z+3, r25	; 0x03
 af2:	82 83       	std	Z+2, r24	; 0x02
 af4:	04 c0       	rjmp	.+8      	; 0xafe <malloc+0xae>
 af6:	90 93 42 01 	sts	0x0142, r25
 afa:	80 93 41 01 	sts	0x0141, r24
 afe:	fd 01       	movw	r30, r26
 b00:	32 96       	adiw	r30, 0x02	; 2
 b02:	4f c0       	rjmp	.+158    	; 0xba2 <malloc+0x152>
 b04:	ca 01       	movw	r24, r20
 b06:	86 1b       	sub	r24, r22
 b08:	97 0b       	sbc	r25, r23
 b0a:	fd 01       	movw	r30, r26
 b0c:	e8 0f       	add	r30, r24
 b0e:	f9 1f       	adc	r31, r25
 b10:	61 93       	st	Z+, r22
 b12:	71 93       	st	Z+, r23
 b14:	02 97       	sbiw	r24, 0x02	; 2
 b16:	8d 93       	st	X+, r24
 b18:	9c 93       	st	X, r25
 b1a:	43 c0       	rjmp	.+134    	; 0xba2 <malloc+0x152>
 b1c:	fd 01       	movw	r30, r26
 b1e:	82 81       	ldd	r24, Z+2	; 0x02
 b20:	93 81       	ldd	r25, Z+3	; 0x03
 b22:	9c 01       	movw	r18, r24
 b24:	d9 01       	movw	r26, r18
 b26:	10 97       	sbiw	r26, 0x00	; 0
 b28:	a1 f6       	brne	.-88     	; 0xad2 <malloc+0x82>
 b2a:	80 91 3f 01 	lds	r24, 0x013F
 b2e:	90 91 40 01 	lds	r25, 0x0140
 b32:	89 2b       	or	r24, r25
 b34:	41 f4       	brne	.+16     	; 0xb46 <malloc+0xf6>
 b36:	80 91 23 01 	lds	r24, 0x0123
 b3a:	90 91 24 01 	lds	r25, 0x0124
 b3e:	90 93 40 01 	sts	0x0140, r25
 b42:	80 93 3f 01 	sts	0x013F, r24
 b46:	40 91 25 01 	lds	r20, 0x0125
 b4a:	50 91 26 01 	lds	r21, 0x0126
 b4e:	41 15       	cp	r20, r1
 b50:	51 05       	cpc	r21, r1
 b52:	41 f4       	brne	.+16     	; 0xb64 <malloc+0x114>
 b54:	4d b7       	in	r20, 0x3d	; 61
 b56:	5e b7       	in	r21, 0x3e	; 62
 b58:	80 91 21 01 	lds	r24, 0x0121
 b5c:	90 91 22 01 	lds	r25, 0x0122
 b60:	48 1b       	sub	r20, r24
 b62:	59 0b       	sbc	r21, r25
 b64:	20 91 3f 01 	lds	r18, 0x013F
 b68:	30 91 40 01 	lds	r19, 0x0140
 b6c:	24 17       	cp	r18, r20
 b6e:	35 07       	cpc	r19, r21
 b70:	b0 f4       	brcc	.+44     	; 0xb9e <malloc+0x14e>
 b72:	ca 01       	movw	r24, r20
 b74:	82 1b       	sub	r24, r18
 b76:	93 0b       	sbc	r25, r19
 b78:	86 17       	cp	r24, r22
 b7a:	97 07       	cpc	r25, r23
 b7c:	80 f0       	brcs	.+32     	; 0xb9e <malloc+0x14e>
 b7e:	ab 01       	movw	r20, r22
 b80:	4e 5f       	subi	r20, 0xFE	; 254
 b82:	5f 4f       	sbci	r21, 0xFF	; 255
 b84:	84 17       	cp	r24, r20
 b86:	95 07       	cpc	r25, r21
 b88:	50 f0       	brcs	.+20     	; 0xb9e <malloc+0x14e>
 b8a:	42 0f       	add	r20, r18
 b8c:	53 1f       	adc	r21, r19
 b8e:	50 93 40 01 	sts	0x0140, r21
 b92:	40 93 3f 01 	sts	0x013F, r20
 b96:	f9 01       	movw	r30, r18
 b98:	61 93       	st	Z+, r22
 b9a:	71 93       	st	Z+, r23
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <malloc+0x152>
 b9e:	e0 e0       	ldi	r30, 0x00	; 0
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	cf 01       	movw	r24, r30
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	08 95       	ret

00000baa <free>:
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	00 97       	sbiw	r24, 0x00	; 0
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <free+0xa>
 bb2:	50 c0       	rjmp	.+160    	; 0xc54 <free+0xaa>
 bb4:	ec 01       	movw	r28, r24
 bb6:	22 97       	sbiw	r28, 0x02	; 2
 bb8:	1b 82       	std	Y+3, r1	; 0x03
 bba:	1a 82       	std	Y+2, r1	; 0x02
 bbc:	a0 91 41 01 	lds	r26, 0x0141
 bc0:	b0 91 42 01 	lds	r27, 0x0142
 bc4:	10 97       	sbiw	r26, 0x00	; 0
 bc6:	09 f1       	breq	.+66     	; 0xc0a <free+0x60>
 bc8:	40 e0       	ldi	r20, 0x00	; 0
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	ac 17       	cp	r26, r28
 bce:	bd 07       	cpc	r27, r29
 bd0:	08 f1       	brcs	.+66     	; 0xc14 <free+0x6a>
 bd2:	bb 83       	std	Y+3, r27	; 0x03
 bd4:	aa 83       	std	Y+2, r26	; 0x02
 bd6:	fe 01       	movw	r30, r28
 bd8:	21 91       	ld	r18, Z+
 bda:	31 91       	ld	r19, Z+
 bdc:	e2 0f       	add	r30, r18
 bde:	f3 1f       	adc	r31, r19
 be0:	ae 17       	cp	r26, r30
 be2:	bf 07       	cpc	r27, r31
 be4:	79 f4       	brne	.+30     	; 0xc04 <free+0x5a>
 be6:	8d 91       	ld	r24, X+
 be8:	9c 91       	ld	r25, X
 bea:	11 97       	sbiw	r26, 0x01	; 1
 bec:	28 0f       	add	r18, r24
 bee:	39 1f       	adc	r19, r25
 bf0:	2e 5f       	subi	r18, 0xFE	; 254
 bf2:	3f 4f       	sbci	r19, 0xFF	; 255
 bf4:	39 83       	std	Y+1, r19	; 0x01
 bf6:	28 83       	st	Y, r18
 bf8:	12 96       	adiw	r26, 0x02	; 2
 bfa:	8d 91       	ld	r24, X+
 bfc:	9c 91       	ld	r25, X
 bfe:	13 97       	sbiw	r26, 0x03	; 3
 c00:	9b 83       	std	Y+3, r25	; 0x03
 c02:	8a 83       	std	Y+2, r24	; 0x02
 c04:	41 15       	cp	r20, r1
 c06:	51 05       	cpc	r21, r1
 c08:	71 f4       	brne	.+28     	; 0xc26 <free+0x7c>
 c0a:	d0 93 42 01 	sts	0x0142, r29
 c0e:	c0 93 41 01 	sts	0x0141, r28
 c12:	20 c0       	rjmp	.+64     	; 0xc54 <free+0xaa>
 c14:	12 96       	adiw	r26, 0x02	; 2
 c16:	8d 91       	ld	r24, X+
 c18:	9c 91       	ld	r25, X
 c1a:	13 97       	sbiw	r26, 0x03	; 3
 c1c:	ad 01       	movw	r20, r26
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	11 f0       	breq	.+4      	; 0xc26 <free+0x7c>
 c22:	dc 01       	movw	r26, r24
 c24:	d3 cf       	rjmp	.-90     	; 0xbcc <free+0x22>
 c26:	fa 01       	movw	r30, r20
 c28:	d3 83       	std	Z+3, r29	; 0x03
 c2a:	c2 83       	std	Z+2, r28	; 0x02
 c2c:	21 91       	ld	r18, Z+
 c2e:	31 91       	ld	r19, Z+
 c30:	e2 0f       	add	r30, r18
 c32:	f3 1f       	adc	r31, r19
 c34:	ce 17       	cp	r28, r30
 c36:	df 07       	cpc	r29, r31
 c38:	69 f4       	brne	.+26     	; 0xc54 <free+0xaa>
 c3a:	88 81       	ld	r24, Y
 c3c:	99 81       	ldd	r25, Y+1	; 0x01
 c3e:	28 0f       	add	r18, r24
 c40:	39 1f       	adc	r19, r25
 c42:	2e 5f       	subi	r18, 0xFE	; 254
 c44:	3f 4f       	sbci	r19, 0xFF	; 255
 c46:	fa 01       	movw	r30, r20
 c48:	31 83       	std	Z+1, r19	; 0x01
 c4a:	20 83       	st	Z, r18
 c4c:	8a 81       	ldd	r24, Y+2	; 0x02
 c4e:	9b 81       	ldd	r25, Y+3	; 0x03
 c50:	93 83       	std	Z+3, r25	; 0x03
 c52:	82 83       	std	Z+2, r24	; 0x02
 c54:	df 91       	pop	r29
 c56:	cf 91       	pop	r28
 c58:	08 95       	ret

00000c5a <_exit>:
 c5a:	f8 94       	cli

00000c5c <__stop_program>:
 c5c:	ff cf       	rjmp	.-2      	; 0xc5c <__stop_program>
